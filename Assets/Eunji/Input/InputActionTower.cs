//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Eunji/Input/InputActionTower.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionTower : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionTower()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionTower"",
    ""maps"": [
        {
            ""name"": ""Test"",
            ""id"": ""7f4b892d-6440-4278-88e3-ab90db81f132"",
            ""actions"": [
                {
                    ""name"": ""ShowMonsterHP"",
                    ""type"": ""Button"",
                    ""id"": ""50a2bfaf-eb72-4f5a-9b52-795b2414c590"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58496c4c-5778-431f-9bb6-368f3ad6af6f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Touch"",
                    ""action"": ""ShowMonsterHP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse&Touch"",
            ""bindingGroup"": ""Mouse&Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_ShowMonsterHP = m_Test.FindAction("ShowMonsterHP", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Test
    private readonly InputActionMap m_Test;
    private ITestActions m_TestActionsCallbackInterface;
    private readonly InputAction m_Test_ShowMonsterHP;
    public struct TestActions
    {
        private @InputActionTower m_Wrapper;
        public TestActions(@InputActionTower wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShowMonsterHP => m_Wrapper.m_Test_ShowMonsterHP;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void SetCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterface != null)
            {
                @ShowMonsterHP.started -= m_Wrapper.m_TestActionsCallbackInterface.OnShowMonsterHP;
                @ShowMonsterHP.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnShowMonsterHP;
                @ShowMonsterHP.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnShowMonsterHP;
            }
            m_Wrapper.m_TestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ShowMonsterHP.started += instance.OnShowMonsterHP;
                @ShowMonsterHP.performed += instance.OnShowMonsterHP;
                @ShowMonsterHP.canceled += instance.OnShowMonsterHP;
            }
        }
    }
    public TestActions @Test => new TestActions(this);
    private int m_MouseTouchSchemeIndex = -1;
    public InputControlScheme MouseTouchScheme
    {
        get
        {
            if (m_MouseTouchSchemeIndex == -1) m_MouseTouchSchemeIndex = asset.FindControlSchemeIndex("Mouse&Touch");
            return asset.controlSchemes[m_MouseTouchSchemeIndex];
        }
    }
    public interface ITestActions
    {
        void OnShowMonsterHP(InputAction.CallbackContext context);
    }
}
