//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Eunji/Input/TowerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TowerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TowerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TowerInputActions"",
    ""maps"": [
        {
            ""name"": ""Tower"",
            ""id"": ""6e88b66e-b43e-4619-886e-03d89446319b"",
            ""actions"": [
                {
                    ""name"": ""Remove"",
                    ""type"": ""Value"",
                    ""id"": ""c9d54948-b3df-48c0-8c40-babbd6656db2"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2840c405-a4c4-47d1-b036-a0cb1294b90f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Remove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Tower
        m_Tower = asset.FindActionMap("Tower", throwIfNotFound: true);
        m_Tower_Remove = m_Tower.FindAction("Remove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tower
    private readonly InputActionMap m_Tower;
    private ITowerActions m_TowerActionsCallbackInterface;
    private readonly InputAction m_Tower_Remove;
    public struct TowerActions
    {
        private @TowerInputActions m_Wrapper;
        public TowerActions(@TowerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Remove => m_Wrapper.m_Tower_Remove;
        public InputActionMap Get() { return m_Wrapper.m_Tower; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TowerActions set) { return set.Get(); }
        public void SetCallbacks(ITowerActions instance)
        {
            if (m_Wrapper.m_TowerActionsCallbackInterface != null)
            {
                @Remove.started -= m_Wrapper.m_TowerActionsCallbackInterface.OnRemove;
                @Remove.performed -= m_Wrapper.m_TowerActionsCallbackInterface.OnRemove;
                @Remove.canceled -= m_Wrapper.m_TowerActionsCallbackInterface.OnRemove;
            }
            m_Wrapper.m_TowerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Remove.started += instance.OnRemove;
                @Remove.performed += instance.OnRemove;
                @Remove.canceled += instance.OnRemove;
            }
        }
    }
    public TowerActions @Tower => new TowerActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface ITowerActions
    {
        void OnRemove(InputAction.CallbackContext context);
    }
}
